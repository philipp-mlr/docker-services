# Google OAuth - Single Sign On using OAuth 2.0
# https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
# oauth:
#   <<: *common-keys-core # See EXTENSION FIELDS at the top
#   container_name: oauth
#   image: thomseddon/traefik-forward-auth:latest
#   environment:
#     - CONFIG=/config
#     - COOKIE_DOMAIN=$DOMAINNAME
#     - INSECURE_COOKIE=false
#     - AUTH_HOST=oauth.$DOMAINNAME
#     - URL_PATH=/_oauth
#     - LOG_LEVEL=warn # set to trace while testing bypass rules
#     - LOG_FORMAT=text
#     - LIFETIME=86400 # 1 day
#     - DEFAULT_ACTION=auth
#     - DEFAULT_PROVIDER=google
#   secrets:
#     - source: traefik_forward_auth
#       target: /config
#   labels:
#     - "traefik.enable=true"
#     ## HTTP Routers
#     - "traefik.http.routers.oauth-rtr.tls=true"
#     - "traefik.http.routers.oauth-rtr.entrypoints=https"
#     - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
#     ## Middlewares
#     - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
#     ## HTTP Services
#     - "traefik.http.routers.oauth-rtr.service=oauth-svc"
#     - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

############################# SECURITY

# CrowdSec - Open-source & collaborative security IPS
# https://www.smarthomebeginner.com/crowdsec-docker-compose-1-fw-bouncer/
# - check collections: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli collections list
# - update hub: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli hub update
# - connect intance: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli console enroll KEY_XXX
# - accept enrollment: https://app.crowdsec.net/instances
# - update acquis.yml in /home/USER/docker-services/appdata/crowdsec/config/acquis.yaml
# - move custom_whitelists.yaml to /home/USER/docker-services/appdata/crowdsec/config/parsers/s02-enrich/
# - check metrics: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli metrics
### install firewall bouncer
# https://doc.crowdsec.net/docs/getting_started/install_crowdsec/##install-our-repositories
# - curl -s https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.deb.sh | sudo bash
# - sudo apt update
# - sudo apt install crowdsec-firewall-bouncer-iptables
# - add bouncer: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli bouncers add host-firewall-bouncer-HOSTNAME
# - edit config: /etc/crowdsec/bouncers/crowdsec-firewall-bouncer.yaml
# crowdsec:
#   <<: *common-keys-core # See EXTENSION FIELDS at the top
#   image: crowdsecurity/crowdsec
#   container_name: crowdsec
#   ports:
#     - "$CROWDSEC_API_PORT:8080"
#     - "$CROWDSEC_PROMETHEUS_EXPORT:6060" # If you don't use ZeroTier remove use just $CROWDSEC_PROMETHEUS_EXPORT:6060
#   environment:
#     COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/iptables crowdsecurity/linux crowdsecurity/nginx crowdsecurity/sshd crowdsecurity/nextcloud LePresidente/adguardhome"
#     GID: "${GID-1000}"
#     CUSTOM_HOSTNAME: vps
#     #DISABLE_LOCAL_API: "true" # Only after successfully registering and validating remote agent below.
#     # For the following, check local_api_credentials.yaml after cscli lapi register (secondary machine) and cscli machine validate (on primary machine)
#     AGENT_USERNAME: $CROWDSEC_AGENT_USERNAME
#     AGENT_PASSWORD: $CROWDSEC_AGENT_PASSWORD
#     LOCAL_API_URL: $CROWDSEC_LOCAL_API_URL
#   volumes:
#     - $SERVICEDIR/logs/:/logs/:ro
#     - /var/log:/var/log:ro
#     - $APPDATADIR/crowdsec/data:/var/lib/crowdsec/data
#     - $APPDATADIR/crowdsec/config:/etc/crowdsec

# CrowdSec Bouncer - Traefik
# https://www.smarthomebeginner.com/crowdsec-traefik-bouncer/
# - add bouncer: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli bouncers add traefik-bouncer-HOSTNAME
# - update the api key for compose file
# - check bouncer: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli bouncers list
# traefik-bouncer:
#   <<: *common-keys-core # See EXTENSION FIELDS at the top
#   image: fbonalair/traefik-crowdsec-bouncer
#   container_name: traefik-bouncer
#   depends_on:
#     - crowdsec
#   environment:
#     GIN_MODE: release # default is debug (more logs)
#     CROWDSEC_BOUNCER_API_KEY: $CROWDSEC_BOUNCER_TRAEFIK_API_KEY
#     CROWDSEC_AGENT_HOST: crowdsec:8080 #$CROWDSEC_LAPI_HOST:$CROWDSEC_LAPI_PORT # CrowdSec host and port

# CrowdSec Bouncer - Cloudflare
# https://www.smarthomebeginner.com/crowdsec-cloudflare-bouncer/
# sudo docker exec crowdsec cscli bouncer add cloudflare-bouncer
# Set max ip number right the first time (max 10000). Recreating container deletes all ips and readds them causing cloudflare 429 rate limiting.
# cloudflare-bouncer:
#   <<: *common-keys-core # See EXTENSION FIELDS at the top
#   image: crowdsecurity/cloudflare-bouncer
#   container_name: cloudflare-bouncer
#   depends_on:
#     - crowdsec
#   volumes:
#     - $APPDATADIR/cloudflare-bouncer/cfg.yaml:/etc/crowdsec/bouncers/crowdsec-cloudflare-bouncer.yaml

############################# MONITORING
# nextcloud-exporter - A prometheus exporter for getting some metrics of a nextcloud server instance.
# Currently only seems to work without Cloudflare Tunnel
# sudo docker exec -t -i -u 33 nextcloud /bin/bash
# occ config:app:set serverinfo token --value yourtoken
# nextcloud-exporter:
#   <<: *common-keys-monitoring
#   image: ghcr.io/xperimental/nextcloud-exporter:latest
#   container_name: nextcloud-exporter
#   environment:
#     NEXTCLOUD_SERVER: https://$DOMAINNAME
#     NEXTCLOUD_AUTH_TOKEN: $NEXTCLOUD_EXPORTER_TOKEN

# Onlyoffice - Feature-rich web-based office suite with a vast range of collaborative capabilities
# Currently only seems to work without Cloudflare Tunnel
# onlyoffice:
#   <<: *common-keys-apps
#   image: onlyoffice/documentserver:latest
#   container_name: onlyoffice
#   ports:
#     - "$ONLYOFFICE_PORT_HTTP:80"
#     - "$ONLYOFFICE_PORT_HTTPS:443"
#   volumes:
#     - $APPDATADIR/onlyoffice/logs:/var/log/onlyoffice
#     #- $SERVICEDIR/shared/certs:/var/www/onlyoffice/Data/certs
#     #environment:
#     #SSL_CERTIFICATE_PATH: /var/www/onlyoffice/Data/certs/cert.pem
#     #SSL_KEY_PATH: /var/www/onlyoffice/Data/certs/key.pem
#   labels:
#     - "traefik.enable=true"
#     ## HTTP Routers
#     - "traefik.http.routers.onlyoffice-rtr.tls=true"
#     - "traefik.http.routers.onlyoffice-rtr.entrypoints=https"
#     - "traefik.http.routers.onlyoffice-rtr.rule=Host(`onlyoffice.$DOMAINNAME`)"
#     ## Middlewares
#     - "traefik.http.routers.onlyoffice-rtr.middlewares=chain-no-auth@file"
#     ## HTTP Services
#     - "traefik.http.routers.onlyoffice-rtr.service=onlyoffice-svc"
#     - "traefik.http.services.onlyoffice-svc.loadbalancer.server.port=443"

# Cloudflare DDNS - Dynamic DNS Updater
# cf-ddns:
#   <<: *common-keys-core # See EXTENSION FIELDS at the top
#   image: oznu/cloudflare-ddns:latest
#   container_name: cf-ddns
#   secrets:
#     - cf_ddns_token
#   environment:
#     API_KEY_FILE: /run/secrets/cf_ddns_token
#     ZONE: $DOMAINNAME
#     PROXIED: true
#     RRTYPE: A
#     DELETE_ON_STOP: false
#     DNS_SERVER: "1.1.1.1"

