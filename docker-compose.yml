version: "3.9"

########################### NETWORKS

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  games:
    name: games
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.0.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  dockeripvlan:
    external: true
    name: br0
  # dockervlan:
  #   name: dockervlan
  #   driver: macvlan
  #   driver_opts:
  #     parent: eth0 # using ifconfig
  #   ipam:
  #     config:
  #       - subnet: "192.168.2.0/24"
  #         ip_range: "192.168.2.200/32"
  #         gateway: "192.168.2.1"

########################### SECRETS

secrets:
  postgres_password:
    file: $SECRETSDIR/postgres_password
  # Traefik
  htpasswd:
    file: $SECRETSDIR/htpasswd
  cf_token:
    file: $SECRETSDIR/cf_token
  # Cloudflare
  cf_ddns_token:
    file: $SECRETSDIR/cf_ddns_token
  # Oauth
  traefik_forward_auth:
    file: $SECRETSDIR/traefik_forward_auth
  # Paperless
  paperless_user:
    file: $SECRETSDIR/paperless_user
  paperless_password:
    file: $SECRETSDIR/paperless_password
  paperless_email:
    file: $SECRETSDIR/paperless_email
  paperless_key:
    file: $SECRETSDIR/paperless_key
  # Nextcloud
  nextcloud_admin_user:
    file: $SECRETSDIR/nextcloud_admin_user
  nextcloud_admin_password:
    file: $SECRETSDIR/nextcloud_admin_password
  # Plex
  plex_claim:
    file: $SECRETSDIR/plex_claim

  ########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Cloudflare refs: https://www.smarthomebeginner.com/cloudflare-settings-for-traefik-docker/
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $APPDATADIR/traefik/acme/acme.json
  # chmod 600 $APPDATADIR/traefik/acme/acme.json
  # touch $SERVICEDIR/logs/traefik.log
  # touch $SERVICEDIR/logs/access.log
  traefik:
    container_name: traefik
    image: traefik:latest
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    security_opt:
      - no-new-privileges:true
    restart: always
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entryPoints.ping.address=:8081
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --api=true
      - --api.dashboard=true
      - --ping=true
      # - --serversTransport.insecureSkipVerify=true
      ### Logging
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599

      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker=true
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      ### Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8081 # insecure api wont work
        published: 8081
        protocol: tcp
        mode: host
    volumes:
      - $APPDATADIR/traefik/nas/rules/:/rules # file provider directory
      - $APPDATADIR/traefik/acme/acme.json:/acme.json # cert location - you must create this emtpy file and change permissions to 600
      - $SERVICEDIR/logs/traefik:/logs # for fail2ban or crowdsec
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_token
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      - DOMAINNAME # Passing the domain name to traefik container to be able to use the variable in rules.
    secrets:
      - cf_token
      - htpasswd
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      - "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
      - "traefik.http.routers.ping.tls=true"
      - "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      t2_proxy:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
      # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
      #- "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=1
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Portainer - WebUI for Containers
  portainer:
    image: portainer/portainer-ee:latest
    container_name: portainer
    depends_on:
      - socket-proxy
    networks:
      - t2_proxy
      - socket_proxy
    security_opt:
    - no-new-privileges:true
    restart: always
    command: -H tcp://socket-proxy:2375
    ports:
      - "$PORTAINER_PORT:9000"
    volumes:
      - $APPDATADIR/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Nextcloud - A suite of client-server software for creating and using file hosting services
  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    depends_on:
      - redis-nextcloud
      - postgres-nextcloud
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$NEXTCLOUD_PORT:80"
    volumes:
      - $APPDATADIR/nextcloud/:/var/www/html
      - $APPDATADIR/paperless/consume:/external/consume #has to belong to www-data:www-data
      - /mnt/user/scan:/external/scan #has to belong to www-data:www-data
    secrets:
      - nextcloud_admin_password
      - nextcloud_admin_user
      - postgres_password
    environment:
      # Postgres
      POSTGRES_HOST: postgres-nextcloud
      POSTGRES_DB: $NEXTCLOUD_DATABASE_NAME
      POSTGRES_USER: $NEXTCLOUD_DATABASE_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      # Redis
      REDIS_HOST: redis-nextcloud
      REDIS_HOST_PORT: $REDIS_NEXTCLOUD_PORT
      # Admin
      NEXTCLOUD_ADMIN_USER_FILE: /run/secrets/nextcloud_admin_user
      NEXTCLOUD_ADMIN_PASSWORD_FILE: /run/secrets/nextcloud_admin_password
      # Etc
      TRUSTED_PROXIES: 192.168.90.0/24 $DOMAINNAME
      OVERWRITEPROTOCOL: https
      NEXTCLOUD_TRUSTED_DOMAINS: $DOMAINNAME
      NEXTCLOUD_INIT_HTACCESS: true
      PHP_MEMORY_LIMIT: 4G
      PHP_UPLOAD_LIMIT: 100G
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      #- "traefik.http.routers.nextcloud-rtr-bypass.tls=true"
      #- "traefik.http.routers.nextcloud-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.nextcloud-rtr-bypass.rule=Host(`$DOMAINNAME`) && (PathPrefix(`/remote.php/dav/files`) || PathPrefix(`/apps/onlyoffice`))"
      #- "traefik.http.routers.nextcloud-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`$DOMAINNAME`) || Host(`www.$DOMAINNAME`)"
      #- "traefik.http.routers.nextcloud-rtr.priority=99"
      ## Middlewares
      #- "traefik.http.routers.nextcloud-rtr-bypass.middlewares=chain-nextcloud-no-auth@file"
      #- "traefik.http.routers.nextcloud-rtr.middlewares=chain-nextcloud-oauth@file"  # Uncomment this
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-nextcloud-no-auth@file" # Comment out this
      ## HTTP Services
      #- "traefik.http.routers.nextcloud-rtr-bypass.service=nextcloud-svc"
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"

  # Onlyoffice - Feature-rich web-based office suite with a vast range of collaborative capabilities
  # Currently only seems to work without Cloudflare Tunnel
  onlyoffice:
    image: onlyoffice/documentserver:latest
    container_name: onlyoffice
    networks:
    - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$ONLYOFFICE_PORT_HTTP:80"
      - "$ONLYOFFICE_PORT_HTTPS:443"
    volumes:
      - $APPDATADIR/onlyoffice/logs:/var/log/onlyoffice
      - $APPDATADIR/onlyoffice/cache:/var/lib/onlyoffice # File cache
      - $APPDATADIR/onlyoffice/db:/var/lib/postgresql # Database
      #- $SERVICEDIR/shared/certs:/var/www/onlyoffice/Data/certs
      #environment:
      #SSL_CERTIFICATE_PATH: /var/www/onlyoffice/Data/certs/cert.pem
      #SSL_KEY_PATH: /var/www/onlyoffice/Data/certs/key.pem
    environment:
      JWT_ENABLED: true
      JWT_SECRET: $ONLYOFFICE_SECRET
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.onlyoffice-rtr.tls=true"
      - "traefik.http.routers.onlyoffice-rtr.entrypoints=https"
      - "traefik.http.routers.onlyoffice-rtr.rule=Host(`onlyoffice.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.onlyoffice-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.onlyoffice-rtr.service=onlyoffice-svc"
      - "traefik.http.services.onlyoffice-svc.loadbalancer.server.port=80"

  # Paperless-ngx - a document management system that transforms your physical documents into a searchable online archive
  paperless:
    image: paperlessngx/paperless-ngx:latest
    container_name: paperless
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$PAPERLESS_PORT:8000"
    depends_on:
      - postgres-paperless
      - redis-paperless
      - gotenberg
      - tika
    healthcheck:
      test:
        ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    secrets:
      - postgres_password
      - paperless_key
      - paperless_password
      - paperless_email
      - paperless_user
    volumes:
      - $APPDATADIR/paperless/data:/usr/src/paperless/data
      - $APPDATADIR/paperless/media:/usr/src/paperless/media
      - $APPDATADIR/paperless/export:/usr/src/paperless/export
      - $APPDATADIR/paperless/consume:/usr/src/paperless/consume
    environment:
      # General
      PAPERLESS_URL: https://dms.$DOMAINNAME
      PAPERLESS_ALLOWED_HOSTS: localhost,paperless,synology,nas,$DOMAINNAME,dms.$DOMAINNAME
      USERMAP_UID: $PUID
      USERMAP_GID: $PGID
      PAPERLESS_TIME_ZONE: $TZ
      PAPERLESS_OCR_LANGUAGE: deu+eng
      PAPERLESS_CONSUMER_ENABLE_BARCODES: true
      PAPERLESS_CONSUMER_ENABLE_ASN_BARCODE: true
      PAPERLESS_CONSUMER_ASN_BARCODE_PREFIX: ASN
      PAPERLESS_WEBSERVER_WORKERS: 2 # Default 1
      PAPERLESS_TASK_WORKERS: 2 # Default 1
      # User
      PAPERLESS_SECRET_KEY_FILE: /run/secrets/paperless_key
      PAPERLESS_ADMIN_USER_FILE: /run/secrets/paperless_user
      PAPERLESS_ADMIN_MAIL_FILE: /run/secrets/paperless_email
      PAPERLESS_ADMIN_PASSWORD_FILE: /run/secrets/paperless_password
      # Database
      PAPERLESS_DBENGINE: postgresql
      PAPERLESS_DBHOST: postgres-paperless
      PAPERLESS_DBNAME: $PAPERLESS_DATABASE_NAME
      PAPERLESS_DBUSER: $PAPERLESS_DATABASE_USER
      PAPERLESS_DBPASS_FILE: /run/secrets/postgres_password
      PAPERLESS_REDIS: redis://redis-paperless:$REDIS_PAPERLESS_PORT
      # Tika & Gotenberg
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:$GOTENBERG_PORT
      PAPERLESS_TIKA_ENDPOINT: http://tika:$TIKA_PORT
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.paperless-rtr.tls=true"
      - "traefik.http.routers.paperless-rtr.entrypoints=https"
      - "traefik.http.routers.paperless-rtr.rule=Host(`dms.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.paperless-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.paperless-rtr.service=paperless-svc"
      - "traefik.http.services.paperless-svc.loadbalancer.server.port=8000"

  # calibre - an e-book manager
  calibre:
    image: lscr.io/linuxserver/calibre:latest
    container_name: calibre
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - $CALIBRE_PORT:8081
      - $CALIBREDESKTOP_PORT:8080
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    volumes:
      - $APPDATADIR/calibre:/config
      - $MEDIADIR/books:/books
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.calibre-rtr.tls=true"
      - "traefik.http.routers.calibre-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-rtr.rule=Host(`calibre.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.calibre-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-rtr.service=calibre-svc"
      - "traefik.http.services.calibre-svc.loadbalancer.server.port=8080"

  # calibre-web - a web app that offers a clean and intuitive interface for browsing, reading, and downloading eBooks
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - $CALIBREWEB_PORT:8083
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      DOCKER_MODS: linuxserver/mods:universal-calibre #optional
      OAUTHLIB_RELAX_TOKEN_SCOPE: 1 #optional
    volumes:
      - $APPDATADIR/calibre_web:/config
      - $APPDATADIR/calibre:/calibre
      - $MEDIADIR/books:/books
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.calibre-web-rtr.tls=true"
      - "traefik.http.routers.calibre-web-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-web-rtr.rule=Host(`books.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.calibre-web-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.calibre-web-rtr.service=calibre-web-svc"
      - "traefik.http.services.calibre-web-svc.loadbalancer.server.port=8083"

  # Recipes - recipe manager that allows you to manage your ever growing collection of digital recipes
  recipes:
    image: vabene1111/recipes
    container_name: recipes
    depends_on:
      - postgres-recipes
    networks:
    - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
        - $RECIPES_PORT:8080
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      POSTGRES_DB: $RECIPES_DATABASE_NAME
      POSTGRES_PASSWORD: $RECIPES_DATABASE_PASSWORD
      POSTGRES_USER: $RECIPES_DATABASE_USER
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres-recipes
      DB_ENGINE: django.db.backends.postgresql
      SECRET_KEY: $RECIPES_SECRET_KEY
      DEBUG: 0
    volumes:
        - $APPDATADIR/recipes/mediafiles:/opt/recipes/mediafiles
        - $APPDATADIR/recipes/staticfiles:/opt/recipes/staticfiles
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.recipes-rtr.tls=true"
      - "traefik.http.routers.recipes-rtr.entrypoints=https"
      - "traefik.http.routers.recipes-rtr.rule=Host(`recipes.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.recipes-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.recipes-rtr.service=recipes-svc"
      - "traefik.http.services.recipes-svc.loadbalancer.server.port=8080"

  # Homepage - Application Dashboard
  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    networks:
      - t2_proxy
      - socket_proxy
    security_opt:
    - no-new-privileges:true
    restart: always
    # ports:
    #  - "$HOMEPAGE_PORT:3000"
    volumes:
      - $APPDATADIR/homepage:/app/config
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      HOMEPAGE_VAR_PLEX_TOKEN: $PLEX_TOKEN
      HOMEPAGE_VAR_OVERSEERR_TOKEN: $OVERSEERR_API_KEY
      HOMEPAGE_VAR_RADARR_TOKEN: $RADARR_API_KEY
      HOMEPAGE_VAR_SONARR_TOKEN: $SONARR_API_KEY
      HOMEPAGE_VAR_READARR_TOKEN: $READARR_API_KEY
      HOMEPAGE_VAR_QBITTORRENT_PASSWORD: $HOMEPAGE_VAR_QBITTORRENT_PASSWORD
      HOMEPAGE_VAR_ADGUARDHOME_PASSWORD: $HOMEPAGE_VAR_ADGUARDHOME_PASSWORD
      HOMEPAGE_VAR_NEXTCLOUD_TOKEN: $HOMEPAGE_VAR_NEXTCLOUD_TOKEN
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homepage-rtr.entrypoints=https"
      - "traefik.http.routers.homepage-rtr.rule=Host(`homepage.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.homepage-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.homepage-rtr.service=homepage-svc"
      - "traefik.http.services.homepage-svc.loadbalancer.server.port=3000"

  # Overseerr - Request management and media discovery
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$OVERSEER_PORT:5055"
    volumes:
      - $APPDATADIR/overseerr/config:/config:rw
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=https"
      - "traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"

  # Speedtest - Internet performance tracking
  speedtest:
    image: ghcr.io/alexjustesen/speedtest-tracker:latest
    container_name: speedtest
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$SPEEDTEST_PORT:80"
    volumes:
      - $APPDATADIR/speedtest-tracker/config:/config:rw
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID      
      DB_CONNECTION: pgsql
      DB_HOST: postgres-speedtest
      DB_PORT: 5432
      DB_DATABASE: $SPEEDTEST_DATABASE_NAME
      DB_USERNAME: $SPEEDTEST_DATABASE_USER
      DB_PASSWORD: $SPEEDTEST_DATABASE_PASSWORD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.speedtest-rtr.entrypoints=https"
      - "traefik.http.routers.speedtest-rtr.rule=Host(`speedtest.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.speedtest-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.speedtest-rtr.service=speedtest-svc"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.port=80"

  # Uptime Kuma - Status Page & Monitoring Server
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    networks:
      - t2_proxy
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    volumes:
      - $APPDATADIR/uptime-kuma:/app/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.uptime-kuma-rtr.entrypoints=https"
      - "traefik.http.routers.uptime-kuma-rtr.rule=Host(`kuma.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.uptime-kuma-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc"
      - "traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001"

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn # set to trace while testing bypass rules
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  ############################# SECURITY

  # CrowdSec - Open-source & collaborative security IPS
  # https://www.smarthomebeginner.com/crowdsec-docker-compose-1-fw-bouncer/
  # - check collections: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli collections list
  # - update hub: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli hub update
  # - connect intance: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli console enroll KEY_XXX
  # - accept enrollment: https://app.crowdsec.net/instances
  # - update acquis.yml in /home/USER/docker-services/appdata/crowdsec/config/acquis.yaml
  # - move custom_whitelists.yaml to /home/USER/docker-services/appdata/crowdsec/config/parsers/s02-enrich/ 
  # - check metrics: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli metrics
  ### install firewall bouncer
  # https://doc.crowdsec.net/docs/getting_started/install_crowdsec/##install-our-repositories
  # - curl -s https://packagecloud.io/install/repositories/crowdsec/crowdsec/script.deb.sh | sudo bash
  # - sudo apt update
  # - sudo apt install crowdsec-firewall-bouncer-iptables
  # - add bouncer: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli bouncers add host-firewall-bouncer-HOSTNAME
  # - edit config: /etc/crowdsec/bouncers/crowdsec-firewall-bouncer.yaml
  crowdsec:
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$CROWDSEC_API_PORT:8080"
      - "$CROWDSEC_PROMETHEUS_EXPORT:6060" # If you don't use ZeroTier remove use just $CROWDSEC_PROMETHEUS_EXPORT:6060
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/iptables crowdsecurity/linux crowdsecurity/nginx crowdsecurity/sshd crowdsecurity/nextcloud LePresidente/adguardhome"
      GID: "${GID-1000}"
      CUSTOM_HOSTNAME: vps
      #DISABLE_LOCAL_API: "true" # Only after successfully registering and validating remote agent below.
      # For the following, check local_api_credentials.yaml after cscli lapi register (secondary machine) and cscli machine validate (on primary machine)
      # AGENT_USERNAME: $CROWDSEC_AGENT_USERNAME
      # AGENT_PASSWORD: $CROWDSEC_AGENT_PASSWORD
      #LOCAL_API_URL: $CROWDSEC_LOCAL_API_URL
    volumes:
      - $SERVICEDIR/logs/:/logs/:ro
      - /var/log:/var/log:ro
      - $APPDATADIR/crowdsec/data:/var/lib/crowdsec/data
      - $APPDATADIR/crowdsec/config:/etc/crowdsec

  # CrowdSec Bouncer - Traefik
  # https://www.smarthomebeginner.com/crowdsec-traefik-bouncer/
  # - add bouncer: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli bouncers add traefik-bouncer-HOSTNAME
  # - update the api key for compose file
  # - check bouncer: sudo docker compose -f /home/USERNAME/docker-services/docker-compose.yml exec -t crowdsec cscli bouncers list
  traefik-bouncer:
    image: fbonalair/traefik-crowdsec-bouncer
    container_name: traefik-bouncer
    depends_on:
      - crowdsec
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      GIN_MODE: release # default is debug (more logs)
      CROWDSEC_BOUNCER_API_KEY: $CROWDSEC_BOUNCER_TRAEFIK_API_KEY
      CROWDSEC_AGENT_HOST: crowdsec:8080 #$CROWDSEC_LAPI_HOST:$CROWDSEC_LAPI_PORT # CrowdSec host and port

  # CrowdSec Bouncer - Cloudflare
  # https://www.smarthomebeginner.com/crowdsec-cloudflare-bouncer/
  # sudo docker exec crowdsec cscli bouncer add cloudflare-bouncer
  # Set max ip number right the first time (max 10000). Recreating container deletes all ips and readds them causing cloudflare 429 rate limiting.
  cloudflare-bouncer:
    image: crowdsecurity/cloudflare-bouncer
    container_name: cloudflare-bouncer
    depends_on:
      - crowdsec
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    volumes:
      - $APPDATADIR/cloudflare-bouncer/cfg.yaml:/etc/crowdsec/bouncers/crowdsec-cloudflare-bouncer.yaml

  ############################# DATABASE

  #Prometheus - Database for sensor data
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$PROMETHEUS_PORT:9090"
    volumes:
      - $APPDATADIR/prometheus/config:/etc/prometheus
      - $APPDATADIR/prometheus/data:/prometheus
    user: $PUID:$PGID
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prometheus-rtr.entrypoints=https"
      - "traefik.http.routers.prometheus-rtr.rule=Host(`prom.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prometheus-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prometheus-rtr.service=prometheus-svc"
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"

  # InfluxDB - Database for sensor data
  # Create influxdb.conf
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$INFLUXDB_PORT:8086"
    volumes:
      - $APPDATADIR/influxdb/db:/var/lib/influxdb
      - $APPDATADIR/influxdb:/etc/influxdb/
    #command: -config /etc/influxdb/influxdb.conf
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.influxdb-rtr.entrypoints=https"
      - "traefik.http.routers.influxdb-rtr.rule=Host(`influxdb.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.influxdb-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.influxdb-rtr.service=influxdb-svc"
      - "traefik.http.services.influxdb-svc.loadbalancer.server.port=8086"

  # redis - In memory key-value store - (Paperless-ngx: Task scheduler and advanced features)
  redis-paperless:
    image: redis:latest
    container_name: redis-paperless
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    command: --port $REDIS_PAPERLESS_PORT
    ports:
      - "$REDIS_PAPERLESS_PORT:$REDIS_PAPERLESS_PORT"
    volumes:
      - $APPDATADIR/redis_paperless/:/data

  # redis - In memory key-value store - (Nextcloud: database caching)
  redis-nextcloud:
    image: redis:latest
    container_name: redis-nextcloud
    networks:
    - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    command: --port $REDIS_NEXTCLOUD_PORT
    ports:
      - "$REDIS_NEXTCLOUD_PORT:$REDIS_NEXTCLOUD_PORT"
    volumes:
      - $APPDATADIR/redis_nextcloud/:/data

  # Postgres - Open source object-relational database (Paperless-ngx)
  postgres-paperless:
    image: postgres:15
    container_name: postgres-paperless
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$POSTGRES_PAPERLESS_PORT:5432"
    volumes:
      - $APPDATADIR/postgres_paperless/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: $PAPERLESS_DATABASE_NAME
      POSTGRES_USER: $PAPERLESS_DATABASE_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password

  # Postgres - Open source object-relational database (Nextcloud)
  postgres-nextcloud:
    image: postgres:15
    container_name: postgres-nextcloud
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$POSTGRES_NEXTCLOUD_PORT:5432"
    volumes:
      - $APPDATADIR/postgres_nextcloud/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: $NEXTCLOUD_DATABASE_NAME
      POSTGRES_USER: $NEXTCLOUD_DATABASE_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password

  # Postgres - Open source object-relational database (Recipes)
  postgres-recipes:
    image: postgres:15
    container_name: postgres-recipes
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$POSTGRES_RECIPES_PORT:5432"
    volumes:
      - $APPDATADIR/postgres_recipes/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: $RECIPES_DATABASE_NAME
      POSTGRES_USER: $RECIPES_DATABASE_USER
      POSTGRES_PASSWORD: $RECIPES_DATABASE_PASSWORD

  # Postgres - Open source object-relational database (Speedtest)
  postgres-speedtest:
    image: postgres:latest
    container_name: postgres-speedtest
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$POSTGRES_SPEEDTEST_PORT:5432"
    volumes:
      - $APPDATADIR/postgres_speedtest/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: $SPEEDTEST_DATABASE_NAME
      POSTGRES_USER: $SPEEDTEST_DATABASE_USER
      POSTGRES_PASSWORD: $SPEEDTEST_DATABASE_PASSWORD

  ############################# UTILITIES

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - t2_proxy
      - default
    security_opt:
    - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$GRAFANA_PORT:3000"
    user: $PUID
    volumes:
      - $APPDATADIR/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"

  # AdGuard Home - DNS AdBlocking
  adguardhome:
    container_name: adguardhome
    image: adguard/adguardhome
    networks:
      dockeripvlan:
        ipv4_address: 192.168.2.150 # IP address inside defined range
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - 53/udp # DNS
      - 67/udp # DHCP
      - 68/tcp # DHCP
      - 68/udp # DHCP
      - 80/tcp # Web UI
      - 443/tcp # Web UI
      - 853/tcp # DNS over TLS
      - 3000/tcp # Web UI
    volumes:
      - $APPDATADIR/adguard/conf:/opt/adguardhome/conf
      - $APPDATADIR/adguard/work:/opt/adguardhome/work
      #- $SERVICEDIR/shared/certs/$DOMAINNAME_HOME_SYNOLOGY:/certs

  # Gluetun - VPN Client for Docker Containers and More
  # Gluetun only for use by torrent clients + on demand lan devices.
  # Arr apps do not need VPN (not recommended), unless you have ISP/country restrictions.
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    ports:
      - "$QBITTORRENT_PORT:8095" # Exposing qBittorrent through Docker Host LAN IP
      - "$SABNZBD_PORT:8085"
      - "$NZBGET_PORT:6789"
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
    volumes:
      - $APPDATADIR/gluetun:/gluetun
    environment:
      TZ: $TZ
      # Wireguard
      VPN_SERVICE_PROVIDER: custom
      VPN_TYPE: wireguard
      VPN_ENDPOINT_IP: $VPN_ENDPOINT_IP
      VPN_ENDPOINT_PORT: $VPN_ENDPOINT_PORT
      WIREGUARD_PUBLIC_KEY: $WIREGUARD_PUBLIC_KEY
      WIREGUARD_PRIVATE_KEY: $WIREGUARD_PRIVATE_KEY
      WIREGUARD_PRESHARED_KEY: $WIREGUARD_PRESHARED_KEY
      WIREGUARD_ADDRESSES: $WIREGUARD_ADDRESSES
    labels:
      - "traefik.enable=true"
      ## Gluetun Built-in HTTP control server
      - "traefik.http.routers.gluetun-rtr.rule=Host(`gluetun.$DOMAINNAME`)"
      - "traefik.http.routers.gluetun-rtr.service=gluetun-svc"
      - "traefik.http.services.gluetun-svc.loadbalancer.server.port=8000"
      #### qBittorrent
      ## HTTP Routers
      - "traefik.http.routers.gluetun-qbitorrent-rtr.entrypoints=https"
      - "traefik.http.routers.gluetun-qbitorrent-rtr.rule=Host(`qbit.$DOMAINNAME`)" # qBittorrent
      ## Middlewares
      - "traefik.http.routers.gluetun-qbitorrent-rtr.middlewares=chain-oauth@file" # qBittorrent
      ## HTTP Services
      - "traefik.http.routers.gluetun-qbitorrent-rtr.service=gluetun-bitorrent-svc" # qBittorrent
      - "traefik.http.services.gluetun-bitorrent-svc.loadbalancer.server.port=8095" # qBittorrent
      #### NZBGET
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME`)"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"
      #### SABnzbd
      ## HTTP Routers Auth
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$DOMAINNAME`)"
      - "traefik.http.routers.sabnzbd-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sabnzbd-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.routers.sabnzbd-rtr-bypass.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8085"

  # gotenberg - an API server for convering document formats (Paperless-ngx)
  gotenberg:
    image: docker.io/gotenberg/gotenberg:latest
    container_name: gotenberg
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$GOTENBERG_PORT:3000"
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  # tika - detects and extracts metadata and text from different file types (Paperless-ngx)
  tika:
    image: ghcr.io/paperless-ngx/tika:latest
    container_name: tika
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$TIKA_PORT:9998"

  # Glances - System Information
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    networks:
      - t2_proxy
      - socket_proxy
      - default
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      #- $APPDATADIR/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $MEDIADIR:/data/data:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      # GLANCES_OPT: "--export influxdb"
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # qDirStat - Directory Statistics
  qdirstat:
    image: jlesage/qdirstat:latest
    container_name: qdirstat
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$QDIRSTAT_PORT:5800"
    volumes:
      - $APPDATADIR/qdirstat/config:/config:rw
      - $MEDIADIR:/data/media:ro
      - $APPDATADIR:/data/appdata:ro
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      UMASK: 002
      TZ: $TZ
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdirstat.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.qdirstat-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"

  # duplicati - Open Source client/server backup system
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      PUID: 0
      GUID: 0
    ports:
      - "$DUPLICATI_PORT:8200"
    cap_add:
      - SYS_ADMIN
    volumes:
      - $APPDATADIR/duplicati/config:/config
      - /mnt/user/:/shares
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.duplicati-rtr.entrypoints=https"
      - "traefik.http.routers.duplicati-rtr.rule=Host(`duplicati.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.duplicati-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.duplicati-rtr.service=duplicati-svc"
      - "traefik.http.services.duplicati-svc.loadbalancer.server.port=8200"

  # Home Assistant Core - Home Automation
  # https://community.home-assistant.io/t/home-assistant-400-bad-request-docker-proxy-solution/322163
  homeassistant:
    image: homeassistant/home-assistant:latest
    container_name: homeassistant
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    network_mode: host
    volumes:
      - $APPDATADIR/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro

  # iperf - A tool for measurements of network bandwidth with the benefits of Clear Linux OS 
  # check speed on the client with: iperf3 -c 192.168.2.100
  iperf-server:
    image: clearlinux/iperf:latest
    container_name: iperf-server
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$IPERF_PORT:5201"
    command: -s

  # Stirling-PDF - PDF manipulation tool that allows you to perform various operations on PDF files
  s-pdf:
    image: frooodle/s-pdf:latest
    container_name: s-pdf
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$SPDF_PORT:8080"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.spdf-rtr.entrypoints=https"
      - "traefik.http.routers.spdf-rtr.rule=Host(`pdf.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.spdf-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.spdf-rtr.service=spdf-svc"
      - "traefik.http.services.spdf-svc.loadbalancer.server.port=8080"

  # it-tools - Collection of handy online tools for developer
  it-tools:
    image: corentinth/it-tools:latest
    container_name: it-tools
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$ITTOOLS_PORT:80"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.it-tools-rtr.entrypoints=https"
      - "traefik.http.routers.it-tools-rtr.rule=Host(`it-tools.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.it-tools-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.it-tools-rtr.service=it-tools-svc"
      - "traefik.http.services.it-tools-svc.loadbalancer.server.port=80"

  filebrowser:
    image: hurlenko/filebrowser:latest
    container_name: filebrowser
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    ports:
      - $FILEBROWSER_PORT:8080
    volumes:
      - $MEDIADIR:/data/media
      - $APPDATADIR:/data/appdata
      - $APPDATADIR/filebrowser:/config
    environment:
      FB_BASEURL: /
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.filebrowser-rtr.entrypoints=https"
      - "traefik.http.routers.filebrowser-rtr.rule=Host(`files.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.filebrowser-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.filebrowser-rtr.service=filebrowser-svc"
      - "traefik.http.services.filebrowser-svc.loadbalancer.server.port=8080"

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  # Needs trailing / if using PathPrefixStrip
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    volumes:
      - $APPDATADIR/qbittorrent:/config
      - $MEDIADIR/torrents:/data/torrents # Ensure that downloads folder is set to /data/downloads in qBittorrent
    environment:
      PUID: 0
      GUID: 0
      UMASK_SET: 002
      WEBUI_PORT: $QBITTORRENT_PORT
    healthcheck: # https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test: "curl -sf https://example.com  || exit 1"
      interval: 1m
      timeout: 10s
      retries: 1
    labels: # Traefik labels added via glueten
      - "deunhealth.restart.on.unhealthy=true"

  # SABnzbd - Binary newsgrabber (NZB downloader)
  # Disable SABNnzbd's built-in HTTPS support for traefik proxy to work
  # Needs trailing / if using PathPrefix
  sabnzbd:
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    network_mode: "service:gluetun"
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    volumes:
      - $APPDATADIR/sabnzbd:/config
      - $MEDIADIR/usenet:/data/usenet
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels: # Traefik labels added via glueten
      - "deunhealth.restart.on.unhealthy=true"

  ############################# INDEXERS

  # Prowlarr - Torrent proxy
  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.162
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$PROWLARR_PORT:9696"
    volumes:
      - $APPDATADIR/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  ############################# PVRS

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.164
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $APPDATADIR/radarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $MEDIADIR/temp/appdata/radarr/MediaCover:/config/MediaCover
      - $MEDIADIR:/data
      # - $MEDIADIR/downloads:/data/downloads
      # - $MEDIADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      #- "traefik.http.routers.radarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    image: lscr.io/linuxserver/sonarr:4.0.0-develop
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.167
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $APPDATADIR/sonarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $MEDIADIR/temp/appdata/sonarr/MediaCover:/config/MediaCover
      - $MEDIADIR:/data
      # - $MEDIADIR/downloads:/data/downloads
      # - $MEDIADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      #- "traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  # Radarr for anime - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr-anime:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr-anime
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.165
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$RADARR_ANIME_PORT:7878"
    volumes:
      - $APPDATADIR/radarr-anime:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $MEDIADIR/temp/appdata/radarr-anime/MediaCover:/config/MediaCover
      - $MEDIADIR:/data
      # - $MEDIADIR/downloads:/data/downloads
      # - $MEDIADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-anime-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-anime-rtr-bypass.rule=Host(`radarr-anime.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      #- "traefik.http.routers.radarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-anime-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-anime-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-anime-rtr.rule=Host(`radarr-anime.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-anime-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-anime-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.radarr-anime-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-anime-rtr.service=radarr-anime-svc"
      - "traefik.http.routers.radarr-anime-rtr-bypass.service=radarr-anime-svc"
      - "traefik.http.services.radarr-anime-svc.loadbalancer.server.port=7878"

  # Sonarr for anime - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr-anime:
    image: lscr.io/linuxserver/sonarr:4.0.0-develop
    container_name: sonarr-anime
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.168
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$SONARR_ANIME_PORT:8989"
    volumes:
      - $APPDATADIR/sonarr-anime:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $MEDIADIR/temp/appdata/sonarr-anime/MediaCover:/config/MediaCover
      - $MEDIADIR:/data
      # - $MEDIADIR/downloads:/data/downloads
      # - $MEDIADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-anime-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-anime-rtr-bypass.rule=Host(`sonarr-anime.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      #- "traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-anime-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-anime-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-anime-rtr.rule=Host(`sonarr-anime.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-anime-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-anime-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.sonarr-anime-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-anime-rtr.service=sonarr-anime-svc"
      - "traefik.http.routers.sonarr-anime-rtr-bypass.service=sonarr-anime-svc"
      - "traefik.http.services.sonarr-anime-svc.loadbalancer.server.port=8989"

  # Readarr - Books management
  # Set url_base in readarr settings if using PathPrefix
  readarr:
    image: hotio/readarr:nightly
    container_name: readarr
    networks:
      t2_proxy:
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$READARR_PORT:8787"
    volumes:
      - $APPDATADIR/readarr:/config
      - $MEDIADIR:/data
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      UMASK: 002
      #ARGS: ""
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=https"
      - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"

  ############################# MEDIA

  #Plex - Media Server
  plexms:
    image: plexinc/pms-docker:latest
    container_name: plexms
    networks:
      t2_proxy:
    security_opt:
      - no-new-privileges:true
    restart: always
    devices:
     - /dev/dri:/dev/dri # for harware transcoding
    ports:
      - "$PLEX_PORT:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      #- "1900:1900/udp" # conflicts with xTeVe
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "$PLEX_WEB_TOOLS_PORT:33400"
    volumes:
      - $APPDATADIR/plexms:/config
      - $MEDIADIR/downloads:/data/downloads
      - $MEDIADIR:/data/media
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM
      # Optional. See why the folders below are mounted as volumes https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $MEDIADIR/temp/appdata/plexms/Cache:/config/Library/Application Support/Plex Media Server/Cache
      - $MEDIADIR/temp/appdata/plexms/Metadata:/config/Library/Application Support/Plex Media Server/Metadata
      - $MEDIADIR/temp/appdata/plexms/Media:/config/Library/Application Support/Plex Media Server/Media
    environment:
      TZ: $TZ
      HOSTNAME: "plex"
      PLEX_CLAIM_FILE: /run/secrets/plex_claim
      PLEX_UID: $PUID
      PLEX_GID: $PGID
      ADVERTISE_IP: "http://localhost:32400,http://$SERVER_IP:32400/,https://plex.$DOMAINNAME"
    secrets:
      - plex_claim
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plex.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=chain-no-auth@file"
      ## HTTP Servicesnoauth
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"

  # Plex Meta Manager - Automatic Metadata Manager for Plex
  plexmm:
    image: lscr.io/linuxserver/plex-meta-manager:latest
    container_name: plexmm
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: "no"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      PMM_CONFIG: /config/config.yml #optional
      PMM_TIME: 03:00 #optional
      PMM_RUN: "True" #optional
      PMM_TEST: "False" #optional
      PMM_NO_MISSING: "False" #optional
    volumes:
      - $APPDATADIR/plex-meta-manager:/config

  # Tautulli - Previously PlexPy. Plex statistics and monitoring
  # Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    ports:
      - "$TAUTULLI_PORT:8181"
    volumes:
      - $APPDATADIR/tautulli/config:/config
      - $APPDATADIR/plexms/Library/Application Support/Plex Media Server/Logs:/logs:ro # For tautulli Plex log viewer
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      #- "traefik.http.routers.tautulli-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.tautulli-rtr-bypass.rule=Host(`tautulli.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$TAUTULLI_API_KEY`) || Query(`apikey`, `$TAUTULLI_API_KEY`))"
      #- "traefik.http.routers.tautulli-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.tautulli-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"
      - "traefik.http.routers.tautulli-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr-bypass.middlewares=chain-oauth@file"
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.routers.tautulli-rtr-bypass.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

  #Notifiarr - Enables content requests from Media Bot
  notifiarr:
    image: golift/notifiarr:latest
    container_name: notifiarr
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$NOTIFIARR_PORT:5454"
    volumes:
      - $APPDATADIR/notifiarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      DN_API_KEY: $NOTIFIARR_API_KEY
      DN_UI_PASSWORD: $NOTIFIARR_UI_PASSWORD
      # Prowlarr
      DN_PROWLARR_0_NAME: Prowlarr
      DN_PROWLARR_0_URL: http://prowlarr:$PROWLARR_PORT
      DN_PROWLARR_0_API_KEY: $PROWLARR_API_KEY
      # Radarr
      DN_RADARR_0_NAME: Radarr
      DN_RADARR_0_URL: http://radarr:$RADARR_PORT
      DN_RADARR_0_API_KEY: $RADARR_API_KEY
      # Sonarr
      DN_SONARR_0_NAME: Sonarr
      DN_SONARR_0_URL: http://sonarr:$SONARR_PORT
      DN_SONARR_0_API_KEY: $SONARR_API_KEY
      # Readarr
      DN_READARR_0_NAME: Readarr
      DN_READARR_0_URL: http://readarr:$READARR_PORT
      DN_READARR_0_API_KEY: $READARR_API_KEY
      # Plex
      DN_PLEX_URL: http://plex:$PLEX_PORT
      DN_PLEX_TOKEN: 
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.notifiarr-rtr.entrypoints=https"
      - "traefik.http.routers.notifiarr-rtr.rule=Host(`notifiarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.notifiarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.notifiarr-rtr.service=notifiarr-svc"
      - "traefik.http.services.notifiarr-svc.loadbalancer.server.port=5454"

  ############################# MEDIA FILE MANAGEMENT

  # Bazarr - Subtitle Management
  bazarr:
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
      - "$BAZARR_PORT:6767"
    volumes:
      - $APPDATADIR/bazarr:/config
      - $MEDIADIR:/data
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

  # Tdarr Server - Library Optimizer
  tdarr:
    image: haveagitgat/tdarr:latest
    container_name: tdarr
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    ports:
     - $TDARR_SERVER_PORT:8266
     - $TDARR_WEB_PORT:8265
     - 8267:8267 # node port. It should be mapped on this container because  the node container use the network from the main container
    volumes:
      - $APPDATADIR/tdarr/server:/app/server
      - $APPDATADIR/tdarr/configs:/app/configs
      - $APPDATADIR/tdarr/logs:/app/logs
      - $APPDATADIR/tdarr/Tdarr_Node:/app/Tdarr_Node/assets/app/plugins/
      - $MEDIADIR/transcode/tdarr:/data/temp
      - $MEDIADIR/:/data/media
      - $MEDIADIR/:/data/output
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      serverIP: tdarr # or hostname
      serverPort: 8266
      webUIPort: 8265
      UMASK_SET: 002
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tdarr-rtr.entrypoints=https"
      - "traefik.http.routers.tdarr-rtr.rule=Host(`tdarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.tdarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tdarr-rtr.service=tdarr-svc"
      - "traefik.http.services.tdarr-svc.loadbalancer.server.port=8265"

  # Tdarr Node - Transcoder Node
  tdarr-node1:
    image: haveagitgat/tdarr_node:latest
    container_name: tdarr-node1
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    devices:
      - /dev/dri:/dev/dri # for hardware transcoding
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      UMASK_SET: 002
      nodeID: Node1
      nodeIP: tdarr-node1 # or hostname
      nodePort: 8267
      serverIP: tdarr # or hostname
      serverPort: 8266
    volumes:
      - $APPDATADIR/tdarr/configs:/app/configs
      - $APPDATADIR/tdarr/logs:/app/logs
      - $APPDATADIR/tdarr/Tdarr_Node:/app/Tdarr_Node/assets/app/plugins/
      - $MEDIADIR/transcode/tdarr:/data/temp
      - $MEDIADIR/:/data/media
      - $MEDIADIR/:/data/output

  ############################# MAINTENANCE

  # Cloudflare DDNS - Dynamic DNS Updater - cloud-domain
  cloudddns-cloud:
    container_name: cloudddns-cloud
    image: joshava/cloudflare-ddns:latest
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    volumes:
      - $APPDATADIR/cloudflare-ddns-cloud/config.yaml:/app/config.yaml

  # Cloudflare DDNS - Dynamic DNS Updater - public-domain
  cloudddns-public:
    container_name: cloudddns-public
    image: joshava/cloudflare-ddns:latest
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    volumes:
      - $APPDATADIR/cloudflare-ddns-public/config.yaml:/app/config.yaml

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    depends_on:
      - socket-proxy
    networks:
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $APPDATADIR/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 12 0 0 * * ? # Everyday at midnight.
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800 # 7 days
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  # WatchTower - Automatic Docker Container Updates
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    depends_on:
      - socket-proxy
    networks:
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      TZ: $TZ
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      DOCKER_HOST: tcp://socket-proxy:2375 # Use this if you have Socket Proxy enabled.

  # DeUnhealth - Restart your unhealthy containers safely (e.g. containers depending on VPN and VPN reconnects)
  deunhealth:
    image: qmcgaw/deunhealth
    container_name: deunhealth
    networks:
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    restart: always
    environment:
      LOG_LEVEL: info
      HEALTH_SERVER_ADDRESS: 127.0.0.1:9999
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  ############################# GAMES

  # playit.gg - a global proxy that allows anyone to host a server without port forwarding
  playit:
    image: embeddedt/playit
    container_name: playit
    networks:
      games:
        ipv4_address: 10.1.0.2
    restart: unless-stopped
    volumes:
      - $APPDATADIR/playit/:/etc/playit

  # TTT - a multiplayer gamemode included with Garry's Mod
  ttt:
    image: jusito/docker-ttt:gmod_ttt_debian
    container_name: ttt
    networks:
      games:
        ipv4_address: 10.1.0.3
    expose:
      - $TTT_PORT/udp
    restart: unless-stopped
    volumes:
      - $APPDATADIR/ttt:/home/steam/serverfiles
    environment:
      INSTALL_CSS: "true"
      SERVER_PORT: 15074
      SERVER_IP: 10.1.0.3
      SERVER_NAME: "TTT2 on ATHENA"
      SERVER_PASSWORD: $TTT_SERVER_PASSWORD
      SERVER_DEFAULT_MAP: "ttt_minecraftcity_v4_dark"
      SERVER_LOGIN_TOKEN: $TTT_SERVER_LOGIN_TOKEN
      SERVER_MAX_PLAYERS: 69
      WORKSHOP_COLLECTION_ID: $TTT_SERVER_COLLECTION_ID

  # Factorio - a game in which you build and maintain factories
  factorio:
    image: gameservermanagers/gameserver:fctr
    container_name: factorio
    networks:
      games:
        ipv4_address: 10.1.0.4
    expose:
      - $FACTORIO_PORT/udp
    restart: unless-stopped
    volumes:
      - $APPDATADIR/factorio:/data

  # Factorio - a game in which you build and maintain factories
  minecraft-allthemods9:
    image: goobaroo/allthemods9:latest
    container_name: minecraft-allthemods9
    networks:
      games:
        ipv4_address: 10.1.0.5
    expose:
      - $MINECRAFT_ALLTHEMODS9_PORT/tcp
    restart: unless-stopped
    volumes:
      - $APPDATADIR/minecraft_allthemods9:/data
    environment:
      EULA: true
      MOTD: "ALL THE MODS 9 on ATHENA"
      JVM_OPTS: "-Xms2G -Xmx24G"

  # Valheim - a game about exploring a huge fantasy world inspired by Norse mythology and Viking culture
  valheim:
    image: lloesche/valheim-server
    container_name: valheim
    networks:
      games:
        ipv4_address: 10.1.0.6
    cap_add:
      - SYS_NICE
    expose:
      - $VALHEIM_PORT/udp
    restart: unless-stopped
    volumes:
      - $APPDATADIR/valheim/data:/opt/valheim
      - $APPDATADIR/valheim/config:/config
    environment:
      SERVER_NAME: "VALHEIM on ATHENA"
      SERVER_PASS: $VALHEIM_PASSWORD
      PUID: $PUID
      PGID: $PGID
    
  palworld:
    image: jammsen/palworld-dedicated-server:latest
    container_name: palworld
    networks:
      games:
        ipv4_address: 10.1.0.7
    expose:
      - $PALWORLD_PORT/udp        
    restart: unless-stopped
    volumes:
      - $APPDATADIR/palworld:/palworld    
    environment:
      TZ: Europe/Berlin # Change this for logging and backup, see "Environment-Variables" 
      ALWAYS_UPDATE_ON_START: true
      MULTITHREAD_ENABLED: true
      COMMUNITY_SERVER: true
      BACKUP_ENABLED: true
      BACKUP_CRON_EXPRESSION: 0 * * * *
      NETSERVERMAXTICKRATE: 120
      DIFFICULTY: None
      DAYTIME_SPEEDRATE: 1.000000
      NIGHTTIME_SPEEDRATE: 1.000000
      EXP_RATE: 1.000000
      PAL_CAPTURE_RATE: 1.000000
      PAL_SPAWN_NUM_RATE: 1.000000
      PAL_DAMAGE_RATE_ATTACK: 1.000000
      PAL_DAMAGE_RATE_DEFENSE: 1.000000
      PLAYER_DAMAGE_RATE_ATTACK: 1.000000
      PLAYER_DAMAGE_RATE_DEFENSE: 1.000000
      PLAYER_STOMACH_DECREASE_RATE: 1.000000
      PLAYER_STAMINA_DECREACE_RATE: 1.000000
      PLAYER_AUTO_HP_REGENE_RATE: 1.000000
      PLAYER_AUTO_HP_REGENE_RATE_IN_SLEEP: 1.000000
      PAL_STOMACH_DECREACE_RATE: 1.000000
      PAL_STAMINA_DECREACE_RATE: 1.000000
      PAL_AUTO_HP_REGENE_RATE: 1.000000
      PAL_AUTO_HP_REGENE_RATE_IN_SLEEP: 1.000000
      BUILD_OBJECT_DAMAGE_RATE: 1.000000
      BUILD_OBJECT_DETERIORATION_DAMAGE_RATE: 1.000000
      COLLECTION_DROP_RATE: 1.000000
      COLLECTION_OBJECT_HP_RATE: 1.000000
      COLLECTION_OBJECT_RESPAWN_SPEED_RATE: 1.000000
      ENEMY_DROP_ITEM_RATE: 1.000000
      DEATH_PENALTY: All
      ENABLE_PLAYER_TO_PLAYER_DAMAGE: false
      ENABLE_FRIENDLY_FIRE: false
      ENABLE_INVADER_ENEMY: true
      ACTIVE_UNKO: false
      ENABLE_AIM_ASSIST_PAD: true
      ENABLE_AIM_ASSIST_KEYBOARD: false
      DROP_ITEM_MAX_NUM: 3000
      DROP_ITEM_MAX_NUM_UNKO: 100
      BASE_CAMP_MAX_NUM: 128
      BASE_CAMP_WORKER_MAXNUM: 15
      DROP_ITEM_ALIVE_MAX_HOURS: 1.000000 
      AUTO_RESET_GUILD_NO_ONLINE_PLAYERS: false
      AUTO_RESET_GUILD_TIME_NO_ONLINE_PLAYERS: 72.000000
      GUILD_PLAYER_MAX_NUM: 20
      PAL_EGG_DEFAULT_HATCHING_TIME: 1.000000
      WORK_SPEED_RATE: 1.000000 
      IS_MULTIPLAY: false
      IS_PVP: false
      CAN_PICKUP_OTHER_GUILD_DEATH_PENALTY_DROP: false
      ENABLE_NON_LOGIN_PENALTY: true
      ENABLE_FAST_TRAVEL: true
      IS_START_LOCATION_SELECT_BY_MAP: true
      EXIST_PLAYER_AFTER_LOGOUT: false
      ENABLE_DEFENSE_OTHER_GUILD_PLAYER: false
      COOP_PLAYER_MAX_NUM: 4
      MAX_PLAYERS: 69
      SERVER_NAME: PALWORLD on ATHENA
      SERVER_DESCRIPTION: Palworld Dedicated-Server hosted by Blackthorn
      ADMIN_PASSWORD: $PALWORLD_ADMIN_PASSWORD
      SERVER_PASSWORD: $PALWORLD_SERVER_PASSWORD
      PUBLIC_PORT: 8211
      PUBLIC_IP: 
      RCON_ENABLED: false
      RCON_PORT: 25575
      REGION: 
      USEAUTH: true
      BAN_LIST_URL: https://api.palworldgame.com/api/banlist.txt