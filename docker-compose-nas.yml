version: "3.9"

########################### NETWORKS

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24
  dockervlan:
    name: dockervlan
    driver: macvlan
    driver_opts:
      parent: eth0 # using ifconfig
    ipam:
      config:
        - subnet: "192.168.2.0/24"
          ip_range: "192.168.2.102/32"
          gateway: "192.168.2.1"

########################### SECRETS

secrets:
  postgres_password:
    file: $DOCKERDIR/secrets/postgres_password
  # Traefik
  htpasswd:
    file: $DOCKERDIR/secrets/htpasswd
  cf_token:
    file: $DOCKERDIR/secrets/cf_token
  # Cloudflare
  cf_ddns_token:
    file: $DOCKERDIR/secrets/cf_ddns_token
  # Oauth
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth
  # Paperless
  paperless_user:
    file: $DOCKERDIR/secrets/paperless_user
  paperless_password:
    file: $DOCKERDIR/secrets/paperless_password
  paperless_email:
    file: $DOCKERDIR/secrets/paperless_email
  paperless_key:
    file: $DOCKERDIR/secrets/paperless_key
  # Nextcloud
  nextcloud_admin_user:
    file: $DOCKERDIR/secrets/nextcloud_admin_user
  nextcloud_admin_password:
    file: $DOCKERDIR/secrets/nextcloud_admin_password

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
  # profiles:
  # - core

  # Keys common to some of the services in basic-services.txt
x-common-keys-monitoring: &common-keys-monitoring
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
  # profiles:
  # - monitoring

  # Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
  # profiles:
  # - apps

  # Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"
  # profiles:
  # - media

  ########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Cloudflare refs: https://www.smarthomebeginner.com/cloudflare-settings-for-traefik-docker/
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/appdata/traefik/acme/acme.json
  # chmod 600 $DOCKERDIR/appdata/traefik/acme/acme.json
  # touch $DOCKERDIR/logs/traefik.log
  # touch $DOCKERDIR/logs/access.log
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:latest
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entryPoints.ping.address=:8081
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --api=true
      - --api.dashboard=true
      - --ping=true
      # - --serversTransport.insecureSkipVerify=true
      ### Logging
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599

      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --providers.docker=true
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      ### Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 5s
      retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8081 # insecure api wont work
        published: 8081
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik/nas/rules/:/rules # file provider directory
      - $DOCKERDIR/appdata/traefik/acme/acme.json:/acme.json # cert location - you must create this emtpy file and change permissions to 600
      - $DOCKERDIR/logs/traefik:/logs # for fail2ban or crowdsec
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_token
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      - DOMAINNAME # Passing the domain name to traefik container to be able to use the variable in rules.
    secrets:
      - cf_token
      - htpasswd
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      - "traefik.http.routers.ping.rule=Host(`traefik.$DOMAINNAME`) && Path(`/ping`)"
      - "traefik.http.routers.ping.tls=true"
      - "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file" # For Google OAuth

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    ports:
      - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
      # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
      #- "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=1
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: portainer/portainer-ce:latest
    container_name: portainer
    depends_on:
      - socket-proxy
    command: -H tcp://socket-proxy:2375
    ports:
      - "$PORTAINER_PORT:9000"
    networks:
      - t2_proxy
      - socket_proxy
    volumes:
      - $DOCKERDIR/appdata/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Nextcloud - A suite of client-server software for creating and using file hosting services
  nextcloud:
    <<: *common-keys-apps
    image: nextcloud:latest
    container_name: nextcloud
    depends_on:
      - redis-nextcloud
      - postgres-nextcloud
    ports:
      - "$NEXTCLOUD_PORT:80"
    volumes:
      - $DOCKERDIR/appdata/nextcloud/:/var/www/html
      - $DOCKERDIR/appdata/paperless/consume:/external/consume #has to belong to www-data:www-data
      - /volume1/scan:/external/scan #has to belong to www-data:www-data
    secrets:
      - nextcloud_admin_password
      - nextcloud_admin_user
      - postgres_password
    environment:
      # Postgres
      POSTGRES_HOST: postgres-nextcloud
      POSTGRES_DB: $NEXTCLOUD_DATABASE_NAME
      POSTGRES_USER: $NEXTCLOUD_DATABASE_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      # Redis
      REDIS_HOST: redis-nextcloud
      REDIS_HOST_PORT: $REDIS_NEXTCLOUD_PORT
      # Admin
      NEXTCLOUD_ADMIN_USER_FILE: /run/secrets/nextcloud_admin_user
      NEXTCLOUD_ADMIN_PASSWORD_FILE: /run/secrets/nextcloud_admin_password
      # Etc
      TRUSTED_PROXIES: 192.168.90.0/24 $DOMAINNAME
      OVERWRITEPROTOCOL: https
      NEXTCLOUD_TRUSTED_DOMAINS: $DOMAINNAME
      NEXTCLOUD_INIT_HTACCESS: true
      PHP_MEMORY_LIMIT: 4G
      PHP_UPLOAD_LIMIT: 100G
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`$DOMAINNAME`) || Host(`www.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-nextcloud@file"
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"

  # Paperless-ngx - a document management system that transforms your physical documents into a searchable online archive
  paperless:
    <<: *common-keys-apps
    image: paperlessngx/paperless-ngx:latest
    container_name: paperless
    ports:
      - "$PAPERLESS_PORT:8000"
    depends_on:
      - postgres-paperless
      - redis-paperless
      - gotenberg
      - tika
    healthcheck:
      test:
        ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    secrets:
      - postgres_password
      - paperless_key
      - paperless_password
    volumes:
      - $DOCKERDIR/appdata/paperless/data:/usr/src/paperless/data
      - $DOCKERDIR/appdata/paperless/media:/usr/src/paperless/media
      - $DOCKERDIR/appdata/paperless/export:/usr/src/paperless/export
      - $DOCKERDIR/appdata/paperless/consume:/usr/src/paperless/consume
    environment:
      # General
      PAPERLESS_URL: https://dms.$DOMAINNAME
      PAPERLESS_ALLOWED_HOSTS: localhost,paperless,synology,nas,$DOMAINNAME,dms.$DOMAINNAME
      USERMAP_UID: $PUID
      USERMAP_GID: $PGID
      PAPERLESS_TIME_ZONE: $TZ
      PAPERLESS_OCR_LANGUAGE: deu+eng
      PAPERLESS_CONSUMER_ENABLE_BARCODES: true
      PAPERLESS_CONSUMER_ENABLE_ASN_BARCODE: true
      PAPERLESS_CONSUMER_ASN_BARCODE_PREFIX: ASN
      PAPERLESS_WEBSERVER_WORKERS: 2 # Default 1
      PAPERLESS_TASK_WORKERS: 2 # Default 1
      # User
      PAPERLESS_SECRET_KEY_FILE: /run/secrets/paperless_key
      PAPERLESS_ADMIN_USER: /run/secrets/paperless_user
      PAPERLESS_ADMIN_MAIL_FILE: /run/secrets/paperless_email
      PAPERLESS_ADMIN_PASSWORD_FILE: /run/secrets/paperless_password
      # Database
      PAPERLESS_DBENGINE: postgresql
      PAPERLESS_DBHOST: postgres-paperless
      PAPERLESS_DBNAME: $PAPERLESS_DATABASE_NAME
      PAPERLESS_DBUSER: $PAPERLESS_DATABASE_USER
      PAPERLESS_DBPASS_FILE: /run/secrets/postgres_password
      PAPERLESS_REDIS: redis://redis-paperless:$REDIS_PAPERLESS_PORT
      # Tika & Gotenberg
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:$GOTENBERG_PORT
      PAPERLESS_TIKA_ENDPOINT: http://tika:$TIKA_PORT
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.paperless-rtr.tls=true"
      - "traefik.http.routers.paperless-rtr.entrypoints=https"
      - "traefik.http.routers.paperless-rtr.rule=Host(`dms.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.paperless-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.paperless-rtr.service=paperless-svc"
      - "traefik.http.services.paperless-svc.loadbalancer.server.port=8000"

  # Homepage - Application Dashboard
  homepage:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    networks:
      - t2_proxy
      - socket_proxy
    # ports:
    #  - "$HOMEPAGE_PORT:3000"
    volumes:
      - $DOCKERDIR/appdata/homepage:/app/config
    environment:
      <<: *default-tz-puid-pgid
      HOMEPAGE_VAR_PLEX_TOKEN: $HOMEPAGE_VAR_PLEX_TOKEN
      HOMEPAGE_VAR_OVERSEERR_TOKEN: $OVERSEERR_API_KEY
      HOMEPAGE_VAR_RADARR_TOKEN: $RADARR_API_KEY
      HOMEPAGE_VAR_SONARR_TOKEN: $SONARR_API_KEY
      HOMEPAGE_VAR_READARR_TOKEN: $READARR_API_KEY
      HOMEPAGE_VAR_QBITTORRENT_PASSWORD: $HOMEPAGE_VAR_QBITTORRENT_PASSWORD
      HOMEPAGE_VAR_ADGUARDHOME_PASSWORD: $HOMEPAGE_VAR_ADGUARDHOME_PASSWORD
      HOMEPAGE_VAR_NEXTCLOUD_TOKEN: $HOMEPAGE_VAR_NEXTCLOUD_TOKEN
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homepage-rtr.entrypoints=https"
      - "traefik.http.routers.homepage-rtr.rule=Host(`homepage.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.homepage-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.homepage-rtr.service=homepage-svc"
      - "traefik.http.services.homepage-svc.loadbalancer.server.port=3000"

  # Overseerr - Request management and media discovery
  overseerr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    ports:
      - "$OVERSEER_PORT:5055"
    volumes:
      - $DOCKERDIR/appdata/overseerr/config:/config:rw
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.overseerr-rtr.entrypoints=https"
      - "traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.overseerr-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.overseerr-rtr.service=overseerr-svc"
      - "traefik.http.services.overseerr-svc.loadbalancer.server.port=5055"

  # Speedtest - Internet performance tracking
  speedtest:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/alexjustesen/speedtest-tracker:latest
    container_name: speedtest
    ports:
      - "$SPEEDTEST_PORT:80"
    volumes:
      - $DOCKERDIR/appdata/speedtest-tracker/config:/config:rw
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.speedtest-rtr.entrypoints=https"
      - "traefik.http.routers.speedtest-rtr.rule=Host(`speedtest.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.speedtest-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.speedtest-rtr.service=speedtest-svc"
      - "traefik.http.services.speedtest-svc.loadbalancer.server.port=80"

  # Uptime Kuma - Status Page & Monitoring Server
  uptime-kuma:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    networks:
      - t2_proxy
      - default
    volumes:
      - $DOCKERDIR/appdata/uptime-kuma:/app/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.uptime-kuma-rtr.entrypoints=https"
      - "traefik.http.routers.uptime-kuma-rtr.rule=Host(`kuma.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.uptime-kuma-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc"
      - "traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001"

  ############################# DATABASE

  #Prometheus - Database for sensor data
  prometheus:
    <<: *common-keys-monitoring # See EXTENSION FIELDS at the top
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "$PROMETHEUS_PORT:9090"
    volumes:
      - $DOCKERDIR/appdata/prometheus/config:/etc/prometheus
      - $DOCKERDIR/appdata/prometheus/data:/prometheus
    user: $PUID:$PGID
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prometheus-rtr.entrypoints=https"
      - "traefik.http.routers.prometheus-rtr.rule=Host(`prom.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prometheus-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.prometheus-rtr.service=prometheus-svc"
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"

  # redis - In memory key-value store - (Paperless-ngx: Task scheduler and advanced features)
  redis-paperless:
    <<: *common-keys-core
    image: redis:latest
    container_name: redis-paperless
    command: --port $REDIS_PAPERLESS_PORT
    ports:
      - "$REDIS_PAPERLESS_PORT:$REDIS_PAPERLESS_PORT"
    volumes:
      - $DOCKERDIR/appdata/redis_paperless/:/data

  # redis - In memory key-value store - (Nextcloud: database caching)
  redis-nextcloud:
    <<: *common-keys-core
    image: redis:latest
    container_name: redis-nextcloud
    command: --port $REDIS_NEXTCLOUD_PORT
    ports:
      - "$REDIS_NEXTCLOUD_PORT:$REDIS_NEXTCLOUD_PORT"
    volumes:
      - $DOCKERDIR/appdata/redis_nextcloud/:/data

  # Postgres - Open source object-relational database (Paperless-ngx)
  postgres-paperless:
    <<: *common-keys-core
    image: postgres:latest
    container_name: postgres-paperless
    ports:
      - "$POSTGRES_PAPERLESS_PORT:5432"
    volumes:
      - $DOCKERDIR/appdata/postgres_paperless/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: $PAPERLESS_DATABASE_NAME
      POSTGRES_USER: $PAPERLESS_DATABASE_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password

  # Postgres - Open source object-relational database (Nextcloud)
  postgres-nextcloud:
    <<: *common-keys-core
    image: postgres:latest
    container_name: postgres-nextcloud
    ports:
      - "$POSTGRES_NEXTCLOUD_PORT:5432"
    volumes:
      - $DOCKERDIR/appdata/postgres_nextcloud/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: $NEXTCLOUD_DATABASE_NAME
      POSTGRES_USER: $NEXTCLOUD_DATABASE_USER
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password

  ############################# UTILITIES

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - t2_proxy
      - default
    ports:
      - "$GRAFANA_PORT:3000"
    user: $PUID
    volumes:
      - $DOCKERDIR/appdata/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"

  # AdGuard Home - DNS AdBlocking
  adguardhome:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: adguardhome
    image: adguard/adguardhome
    networks:
      dockervlan:
        ipv4_address: 192.168.2.102 # IP address inside defined range
    ports:
      - 53/udp # DNS
      - 67/udp # DHCP
      - 68/tcp # DHCP
      - 68/udp # DHCP
      - 80/tcp # Web UI
      - 443/tcp # Web UI
      - 853/tcp # DNS over TLS
      - 3000/tcp # Web UI
    volumes:
      - $DOCKERDIR/appdata/adguard/conf:/opt/adguardhome/conf
      - $DOCKERDIR/appdata/adguard/work:/opt/adguardhome/work
      #- $DOCKERDIR/shared/certs/$DOMAINNAME_HOME_SYNOLOGY:/certs

  # Gluetun - VPN Client for Docker Containers and More
  # Gluetun only for use by torrent clients + on demand lan devices.
  # Arr apps do not need VPN (not recommended), unless you have ISP/country restrictions.
  gluetun:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: qmcgaw/gluetun
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    ports:
      - "$QBITTORRENT_PORT:8080" # Exposing qBittorrent through Docker Host LAN IP
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
    volumes:
      - $DOCKERDIR/appdata/gluetun:/gluetun
    environment:
      TZ: $TZ
      # Wireguard
      VPN_SERVICE_PROVIDER: custom
      VPN_TYPE: wireguard
      VPN_ENDPOINT_IP: $VPN_ENDPOINT_IP
      VPN_ENDPOINT_PORT: $VPN_ENDPOINT_PORT
      WIREGUARD_PUBLIC_KEY: $WIREGUARD_PUBLIC_KEY
      WIREGUARD_PRIVATE_KEY: $WIREGUARD_PRIVATE_KEY
      WIREGUARD_PRESHARED_KEY: $WIREGUARD_PRESHARED_KEY
      WIREGUARD_ADDRESSES: $WIREGUARD_ADDRESSES
    labels:
      - "traefik.enable=true"
      ## Gluetun Built-in HTTP control server
      - "traefik.http.routers.gluetun-rtr.rule=Host(`gluetun.$DOMAINNAME`)"
      - "traefik.http.routers.gluetun-rtr.service=gluetun-svc"
      - "traefik.http.services.gluetun-svc.loadbalancer.server.port=8000"
      ## HTTP Routers
      - "traefik.http.routers.gluetun-qbitorrent-rtr.entrypoints=https"
      - "traefik.http.routers.gluetun-qbitorrent-rtr.rule=Host(`qbit.$DOMAINNAME`)" # qBittorrent
      ## Middlewares
      - "traefik.http.routers.gluetun-qbitorrent-rtr.middlewares=chain-no-auth@file" # qBittorrent # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.gluetun-qbitorrent-rtr.service=gluetun-bitorrent-svc" # qBittorrent
      - "traefik.http.services.gluetun-bitorrent-svc.loadbalancer.server.port=8080" # qBittorrent

  # gotenberg - an API server for convering document formats (Paperless-ngx)
  gotenberg:
    <<: *common-keys-core
    image: docker.io/gotenberg/gotenberg:latest
    container_name: gotenberg
    ports:
      - "$GOTENBERG_PORT:3000"
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  # tika - detects and extracts metadata and text from different file types (Paperless-ngx)
  tika:
    <<: *common-keys-apps
    image: ghcr.io/paperless-ngx/tika:latest
    container_name: tika
    ports:
      - "$TIKA_PORT:9998"

  # Traefik Certs Dumper - Extract LetsEncrypt Certificates - Traefik2 Compatible
  certdumper:
    <<: *common-keys-core
    container_name: traefik_certdumper
    image: humenius/traefik-certs-dumper:latest
    command: --restart-containers onlyoffice
    networks:
      - socket_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKERDIR/appdata/traefik/acme:/traefik:ro
      - $DOCKERDIR/shared/certs/:/output:rw
    environment:
      DOMAIN: $DOMAINNAME

  # ProtonmailBridge - ProtonMail IMAP/SMTP Bridge Docker container
  protonmail-bridge:
    <<: *common-keys-core
    container_name: protonmail-bridge
    image: shenxn/protonmail-bridge:2.3.0-1
    ports:
      - 127.0.0.1:$PROTONMAIL_IMAP_PORT:25/tcp #SMTP
      - 127.0.0.1:$PROTONMAIL_SMTP_PORT:143/tcp #IMAP
    volumes:
      - $DOCKERDIR/appdata/protonmail_bridge:/root

  # Glances - System Information
  glances:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: nicolargo/glances:latest
    container_name: glances
    # privileged: true # Only for VM
    # network_mode: host
    networks:
      - t2_proxy
      - socket_proxy
      - default
    ports:
      - "$GLANCES_PORT:61208"
    pid: host
    volumes:
      #- $DOCKERDIR/appdata/glances/glances.conf:/glances/conf/glances.conf # Use this if you want to add a glances.conf file
      - $DATADIR:/data/data:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
    environment:
      # GLANCES_OPT: "-C /glances/conf/glances.conf --quiet --export influxdb"
      # GLANCES_OPT: "--export influxdb"
      GLANCES_OPT: "-w"
      DOCKER_HOST: tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  # qDirStat - Directory Statistics
  qdirstat:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: jlesage/qdirstat:latest
    container_name: qdirstat
    ports:
      - "$QDIRSTAT_PORT:5800"
    volumes:
      - $DOCKERDIR/appdata/qdirstat/config:/config:rw
      - $DATADIR:/data/media:ro
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      UMASK: 002
      TZ: $TZ
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $QDIRSTAT_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"
      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdirstat.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.qdirstat-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  # Needs trailing / if using PathPrefixStrip
  qbittorrent:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    # ports:
    #   - "$QBITTORRENT_PORT:8080" # Explosed via gluetun
    volumes:
      - $DOCKERDIR/appdata/qbittorrent:/config
      - $DATADIR/downloads:/data/downloads # Ensure that downloads folder is set to /data/downloads in qBittorrent
    environment:
      PUID: 0
      GUID: 0
      UMASK_SET: 002
    healthcheck: # https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test: "curl -sf https://example.com  || exit 1"
      interval: 1m
      timeout: 10s
      retries: 1
    labels: # Traefik labels added via glueten
      - "deunhealth.restart.on.unhealthy=true"

  # nzbget - Binary newsgrabber (NZB downloader)
  nzbget:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/nzbget
    container_name: nzbget
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.216
    ports:
      - "$NZBGET_PORT:6789"
    volumes:
      - $DOCKERDIR/appdata/nzbget:/config
      - $DATADIR/downloads:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbget-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr-bypass.rule=Headers(`traefik-bypass-key`, `$TRAEFIK_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.nzbget-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME`)"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"

  # SABnzbd - Binary newsgrabber (NZB downloader)
  # Disable SABNnzbd's built-in HTTPS support for traefik proxy to work
  # Needs trailing / if using PathPrefix
  sabnzbd:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    network_mode: "service:gluetun"
    # ports:
    #   - "$SABNZBD_PORT:8080" # Explosed via gluetun
    volumes:
      - $DOCKERDIR/appdata/sabnzbd:/config
      - $DATADIR/downloads:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
    labels: # Traefik labels added via glueten
      - "deunhealth.restart.on.unhealthy=true"

  ############################# INDEXERS

  # Prowlarr - Torrent proxy
  prowlarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.162
    ports:
      - "$PROWLARR_PORT:9696"
    volumes:
      - $DOCKERDIR/appdata/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  ############################# PVRS

  # Radarr - Movie management
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.164
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $DATADIR/temp/appdata/radarr/MediaCover:/config/MediaCover
      - $DATADIR:/data
      # - $DATADIR/downloads:/data/downloads
      # - $DATADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr:develop
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.167
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      - $DATADIR/temp/appdata/sonarr/MediaCover:/config/MediaCover
      - $DATADIR:/data
      # - $DATADIR/downloads:/data/downloads
      # - $DATADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  # Readarr - Books management
  # Set url_base in readarr settings if using PathPrefix
  readarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: hotio/readarr:nightly
    container_name: readarr
    ports:
      - "$READARR_PORT:8787"
    volumes:
      - $DOCKERDIR/appdata/readarr:/config
      - $DATADIR:/data
      # - $DATADIR/downloads:/data/downloads
      # - $DATADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
      UMASK: 002
      #ARGS: ""
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.readarr-rtr.entrypoints=https"
      - "traefik.http.routers.readarr-rtr.rule=Host(`readarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.readarr-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.readarr-rtr.service=readarr-svc"
      - "traefik.http.services.readarr-svc.loadbalancer.server.port=8787"

  ############################# MEDIA

  ############################# MEDIA FILE MANAGEMENT

  # Bazarr - Subtitle Management
  bazarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    ports:
      - "$BAZARR_PORT:6767"
    volumes:
      - $DOCKERDIR/appdata/bazarr:/config
      - $DATADIR:/data
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

  # Handbrake - Video Conversion (Transcoding and compression)
  handbrake:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: jlesage/handbrake:latest
    container_name: handbrake
    ports:
      - "$HANDBRAKE_PORT:5800"
    volumes:
      - $DATADIR/downloads:/data/downloads
      - $DOCKERDIR/appdata/handbrake/config:/config
      - $DOCKERDIR/appdata/handbrake/watch:/watch
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      UMASK: 002
      TZ: $TZ
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      AUTOMATED_CONVERSION_KEEP_SOURCE: 1
      VNC_PASSWORD: $HANDBRAKE_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.handbrake-rtr.entrypoints=https"
      - "traefik.http.routers.handbrake-rtr.rule=Host(`handbrake.$DOMAINNAME`)"
      ## Middlewares
      - "traefik.http.routers.handbrake-rtr.middlewares=chain-no-auth@file" # TODO: change to auth later on
      ## HTTP Services
      - "traefik.http.routers.handbrake-rtr.service=handbrake-svc"
      - "traefik.http.services.handbrake-svc.loadbalancer.server.port=5800"

  ############################# MAINTENANCE

  # Cloudflared - Client for Cloudflare Tunnel, a daemon that exposes private services through the Cloudflare edge.
  cf-tunnel:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: cf-tunnel
    image: cloudflare/cloudflared
    command: tunnel run
    environment:
      TUNNEL_TOKEN: $CF_TUNNEL_TOKEN

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    depends_on:
      - socket-proxy
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 12 0 0 * * ? # Everyday at midnight.
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800 # 7 days
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

  # WatchTower - Automatic Docker Container Updates
  watchtower:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: containrrr/watchtower
    container_name: watchtower
    depends_on:
      - socket-proxy
    networks:
      - socket_proxy
    environment:
      TZ: $TZ
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_REVIVE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      DOCKER_HOST: tcp://socket-proxy:2375 # Use this if you have Socket Proxy enabled.

  # DeUnhealth - Restart your unhealthy containers safely (e.g. containers depending on VPN and VPN reconnects)
  deunhealth:
    <<: *common-keys-core
    image: qmcgaw/deunhealth
    container_name: deunhealth
    networks:
      - socket_proxy
    environment:
      LOG_LEVEL: info
      HEALTH_SERVER_ADDRESS: 127.0.0.1:9999
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375
